<?xml version="1.0" encoding="UTF-8"?>

<features>
	<!-- Component -->
	
	<feature context="component"  name="data_component" label="Data Component">
		<description>Allows having data source components in the composition language. Data components provide data as output and are typically not involved in data processing and transformation. </description>
		<specification>
		
			<include fragments="componentTypeData,operationDef,operationType" />

			<setCardinality element="setOperationPerComponent" minOccurs="1"/>
			
		</specification>
		<constraints>(blackboard OR data_flow) AND request_response_for_data</constraints>
	</feature>
	
	<feature context="component" name="request_response_for_data" label="Request-response operations for data components">
		<description>Data components can include request-response operations, that is, synchronous operations receiving some inputs and producing some output. </description>
		<specification>

			<include fragments="request-responseOperationType" />
			<include fragments="inputParameterDef,outputParameterDef" if="data_flow OR blackboard"></include>
			
			<setCardinality element="setInputParameterPerOperation" minOccurs="1" />
			<setCardinality element="setOutputParameterPerOperation" minOccurs="1" />

		</specification>
		<constraints>data_component AND (RSS_for_data OR atom_for_data OR REST_for_data OR SOAP_for_data OR javascript_for_data)</constraints>
	</feature>
	
	<feature context="component" name="RSS_for_data" label="RSS for Data components">
		<description>Data components can be implemented as RSS feeds</description>
		<specification>
		
			<include fragments="componentBindingRSS" />
			
		</specification>
		<constraints>data_component</constraints>
	</feature>
	
	<feature context="component" name="atom_for_data" label="Atom for Data components">
		<description>Data components can be implemented as Atom feeds</description>
		<specification>
			
			<include fragments="componentBindingAtom" />

		</specification>
		<constraints>data_component</constraints>
	</feature>
	
	<feature context="component" name="REST_for_data" label="REST for Data components">
		<description>Data components can be implemented as REST services</description>
		<specification>
			
			<include fragments="componentBindingREST" />

		</specification>
		<constraints>data_component</constraints>
	</feature>
	
	<feature context="component" name="SOAP_for_data" label="SOAP for Data components">
		<description>Data components can be implemented as SOAP services</description>
		<specification>
			
			<include fragments="componentBindingSOAP" />

		</specification>
		<constraints>data_component</constraints>
	</feature>
	
	<feature context="component" name="javascript_for_data" label="JavaScript for Data components">
		<description>Data components can be implemented as JavaScript APIs</description>
		<specification>
			
			<include fragments="componentBindingJavaScript" />

		</specification>
		<constraints>data_component</constraints>
	</feature>
	
	<feature context="component" name="service_component" label="Service Component">
		<description>Allows having service components in the composition language. Service components can get data, provide data or both and they typically do some data processing. </description>
		<specification>
			
			<include fragments="componentTypeService,operationDef,operationType" />
			
			<setCardinality element="setOperationPerComponent" minOccurs="1"/>
			
		</specification>
		<constraints>(request_response_for_service OR one_way_for_service OR notification_for_service OR solicit_response_for_service)</constraints>
	</feature> 
	
	<feature context="component" name="request_response_for_service" label="Request-response operations for service components">
		<description>Service components can include request-response operations, that is, synchronous operations receiving some inputs and producing some output. </description>
		<specification>
			
			<include fragments="request-responseOperationType" />
			<include fragments="inputParameterDef,outputParameterDef" if="data_flow OR blackboard" />
			
			<setCardinality element="setInputParameterPerOperation" minOccurs="1"/>
			<setCardinality element="setOutputParameterPerOperation" minOccurs="1"/>
			
		</specification>
		<constraints>service_component AND (RSS_for_service OR atom_for_service OR REST_for_service OR SOAP_for_service OR javascript_for_service)</constraints>
	</feature>
	
	<feature context="component"  name="one_way_for_service" label="One-way operations for service components">
		<description>Service components can include one-way operations, that is, operations only receiving some inputs and providing no outputs. </description>
		<specification>
		
			<include fragments="one-wayOperationType" />
			<include fragments="inputParameterDef" if="data_flow OR blackboard" />
			
			<setCardinality element="setInputParameterPerOperation" minOccurs="1"/>
			<setCardinality element="setOutputParameterPerOperation" minOccurs="0"/>
			
		</specification>
		<constraints>service_component AND (RSS_for_service OR atom_for_service OR REST_for_service OR SOAP_for_service OR javascript_for_service)</constraints>
	</feature>
	
	<feature context="component" name="notification_for_service" label="Notification operations for service components">
		<description>Service components can include notification operations, that is, operations asynchronously providing outputs and receiving no inputs. </description>
		<specification>
			
			<include fragments="notificationOperationType" />
			<include fragments="outputParameterDef" if="data_flow OR blackboard" />
			
			<setCardinality element="setInputParameterPerOperation" minOccurs="0"/>
			<setCardinality element="setOutputParameterPerOperation" minOccurs="1"/>
			
		</specification>
		<constraints>service_component AND (SOAP_for_service OR javascript_for_service)</constraints>
	</feature>
	
	<feature context="component" name="solicit_response_for_service" label="Solicit-response operations for service components">
		<description>Service components can include solicit-response operations, that is, operations asynchronously providing outputs and waiting to receive some inputs. </description>
		<specification>
			
			<include fragments="solicit-responseOperationType" />
			<include fragments="inputParameterDef,outputParameterDef" if="data_flow OR blackboard" />
			
			<setCardinality element="setInputParameterPerOperation" minOccurs="1"/>
			<setCardinality element="setOutputParameterPerOperation" minOccurs="1"/>
			
		</specification>
		<constraints>service_component AND SOAP_for_service</constraints>
	</feature>
	
	<feature context="component" name="RSS_for_service" label="RSS for Service components">
		<description>Service components can be implemented as RSS feeds</description>
		<specification>
			
			<include fragments="componentBindingRSS" />

		</specification>
		<constraints>service_component</constraints>
	</feature>
	
	<feature context="component" name="atom_for_service" label="Atom for Service components">
		<description>Service components can be implemented as Atom feeds</description>
		<specification>
			
			<include fragments="componentBindingAtom" />

		</specification>
		<constraints>service_component</constraints>
	</feature>
	
	<feature context="component" name="REST_for_service" label="REST for Service components">
		<description>Service components can be implemented as REST service</description>
		<specification>
			
			<include fragments="componentBindingREST" />
			
		</specification>
		<constraints>service_component</constraints>
	</feature>
	
	<feature context="component" name="SOAP_for_service" label="SOAP for Service components">
		<description>Service components can be implemented as SOAP services</description>
		<specification>
			
			<include fragments="componentBindingSOAP" />
			
		</specification>
		<constraints>service_component</constraints>
	</feature>
	
	<feature context="component" name="javascript_for_service" label="JavaScript for Service components">
		<description>Service components can be implemented as JavaScript APIs</description>
		<specification>
			
			<include fragments="componentBindingJavaScript" />
			
		</specification>
		<constraints>service_component</constraints>
	</feature>
	
	<feature context="component" name="UI_component" label="UI Component">
		<description>Allows having UI components in the composition language. UI components typically render data and allow for direct user interactions with the composition. They can either get data as input or provide date as output, but do not support request-response operations.</description>
		<specification>
			
			<include fragments="componentTypeUI" />

		</specification>
		<constraints>user_interface AND (one_way_for_UI OR notification_for_UI OR isolated_UI)</constraints>
	</feature> 
	
	<feature context="component" name="one_way_for_UI" label="One-way operations for UI components">
		<description>Service components can include one-way operations, that is, operations only receiving some inputs and providing no outputs. </description>
		<specification>
				
			<include fragments="operationDef,operationType,one-wayOperationType" />
			<include fragments="inputParameterDef" if="data_flow OR blackboard" />
			
			<setCardinality element="setOperationPerComponent" minOccurs="1"/>
			<setCardinality element="setInputParameterPerOperation" minOccurs="1"/>
			<setCardinality element="setOutputParameterPerOperation" minOccurs="0"/>
		
		</specification>
		<constraints>UI_component AND javascript_for_UI</constraints>
	</feature>
	
	<feature context="component" name="notification_for_UI" label="Notification operations for UI components">
		<description>UI components can include notification operations, that is, operations asynchronously providing outputs (typically as consequence of a user action) and receiving no inputs. </description>
		<specification>
		
			<include fragments="operationDef,operationType,notificationOperationType" />
			<include fragments="outputParameterDef" if="data_flow OR blackboard" />
			
			<setCardinality element="setOperationPerComponent" minOccurs="1"/>
			<setCardinality element="setInputParameterPerOperation" minOccurs="0"/>
			<setCardinality element="setOutputParameterPerOperation" minOccurs="1"/>
			
		</specification>
		<constraints>UI_component AND javascript_for_UI</constraints>
	</feature>
	
	<feature context="component" name="isolated_UI" label="Isolated UI components">
		<description>UI components can include components with no operations exposed to the external world, that is, widgets that only render some data but have no inputs or outputs. </description>
		<specification>
			
			<setCardinality element="setOperationPerComponent" minOccurs="0"/>
		
		</specification>
		<constraints>UI_component AND (javascript_for_UI OR W3C_Widget_for_UI)</constraints>
	</feature>
	
	<feature context="component" name="javascript_for_UI" label="javascript for UI components">
		<description>UI components can be implemented as JavaScript components</description>
		<specification>
		
			<include fragments="componentBindingJavaScript" />
			
		</specification>
		<constraints>UI_component</constraints>
	</feature>
	
	<feature context="component" name="W3C_Widget_for_UI" label="W3C Widgets for UI components">
		<description>UI components can be implemented as W3C Widgets</description>
		<specification>
		
			<include fragments="componentBindingWidget" />
			
		</specification>
		<constraints>UI_component</constraints>
	</feature>
	
	<feature context="component" name="manual_input" label="Manual input for input parameters">
		<description>Allows having a manual input box next to an input parameter port, so that it is possible to choose at design time whether to provide the inputs manually or to connect the input to an operation output through a connector.</description>
		<specification>
			
			<include fragments="constantDef,constantType,feedsInputParAttribute" />
			<include fragments="manualInputAttribute" />
					
		</specification>
		<constraints>blackboard OR data_flow</constraints>
	</feature>
	
	<feature context="component" name="configuration_param" label="Configuration parameters">
		<description>Allows having a configuration parameters for components to be set up at design time and used to initialize the components at the mashup runtime.</description>
		<specification>
			
			<include fragments="configurationParameterDef,constantDef,constantType,feedsConfigurationParameterAttribute" />
			
		</specification>
		<constraints></constraints>
	</feature>
	
	<!-- These min values depend on the type of operation (req-resp, one-way, etc.) and are already set up above 
	<feature name="min_0_operation_per_component" label="Minimum 0 operations per component">
		<description>Components can have 0 operations.</description>
		<specification>
		</specification>
		<constraints>isolated_UI</constraints>
	</feature>
	
	<feature name="min_1_operation_per_component" label="Minimum 1 operation per component">
		<description>Any component must have at least 1 operation.</description>
		<specification>
			<set element="/xs:complexType[@name=componentType]/xs:choice/xs:element[@name=operations]/xs:complexType/xs:sequence/xs:element[@name=operation]" attribute="minOccurs" value="1" />
		</specification>
		<constraints>NOT isolated_UI</constraints>
	</feature> -->
	
	<feature context="component" name="max_0_operation_per_component" label="No operations for components">
		<description>Any component can have maximum 1 operation.</description>
		<specification>

			<setCardinality element="setOperationPerComponent" maxOccurs="0"/>
			
		</specification>
		<constraints>isolated_UI AND NOT(data_component OR service_component OR one_way_for_UI OR notification_for_UI) AND NOT(data_flow OR control_flow)</constraints>
	</feature>
	
	<feature context="component" name="max_1_operation_per_component" label="Maximum 1 operation per component">
		<description>Any component can have maximum 1 operation.</description>
		<specification>
		
			<setCardinality element="setOperationPerComponent" maxOccurs="1"/>

		</specification>
		<constraints>NOT(isolated_UI AND NOT(data_component OR service_component OR one_way_for_UI OR notification_for_UI))</constraints>
	</feature>
	
	<feature context="component" name="max_N_operation_per_component" label="No maximum number of operation per component">
		<description>Component do not have any maximum number of operations.</description>
		<specification>
			
			<setCardinality element="setOperationPerComponent" maxOccurs="unbounded"/>

		</specification>
		<constraints>NOT(isolated_UI AND NOT(data_component OR service_component OR one_way_for_UI OR notification_for_UI))</constraints>
	</feature>
	
	<feature context="component" name="max_1_input_param_per_operation" label="Maximum 1 input parameter per opearation">
		<description>Components operations can have maximum 1 input parameter.</description>
		<specification>
		
			<setCardinality element="setInputParameterPerOperation" maxOccurs="1"/>

		</specification>
		<constraints>(data_flow OR blackboard) AND (request_response_for_data OR request_response_for_service OR one_way_for_service OR one_way_for_UI)</constraints>
	</feature>
	
	<feature context="component" name="max_N_input_param_per_operation" label="No maximum number of input parameters per operation">
		<description>Components operations do not have any maximum number of input parameters.</description>
		<specification>
			
			<setCardinality element="setInputParameterPerOperation" maxOccurs="unbounded"/>

		</specification>
		<constraints>(data_flow OR blackboard) AND (request_response_for_data OR request_response_for_service OR one_way_for_service OR one_way_for_UI OR solicit_response_for_service)</constraints>
	</feature>
	
	<feature context="component" name="max_1_output_param_per_operation" label="Maximum 1 output parameter per opearation">
		<description>Components operations can have maximum 1 output parameter.</description>
		<specification>
			
			<setCardinality element="setOutputParameterPerOperation" maxOccurs="1"/>
			
		</specification>
		<constraints>(data_flow OR blackboard) AND (request_response_for_data OR request_response_for_service OR notification_for_service OR notification_for_UI OR solicit_response_for_service)</constraints>
	</feature>
	
	<feature context="component" name="max_N_output_param_per_operation" label="No maximum number of output parameters per operation">
		<description>Components operations do not have any maximum number of output parameters.</description>
		<specification>
		
			<setCardinality element="setOutputParameterPerOperation" maxOccurs="unbounded"/>
		
		</specification>
		<constraints>data_flow OR blackboard</constraints>
	</feature>
	
	
	
	<!-- Control flow -->
	
	<feature context="controlflow" name="control_flow" label="Control flow">
		<description>The composition paradigm is control flow, that is, it is possible to explicitly define the operations invocation sequence. Data passing is not managed and, if needed, must be supported through a blackboard approach</description>
		<specification>
		
			<include fragments="cfConnectorDef,cfConnectorType" />
			
		</specification>
		<constraints></constraints>
	</feature>
	
	<feature context="controlflow" name="condition" label="Conditions">
		<description>Conditions can be set for each connector to define the possible flows of the composition. Conditions are supported both for control flow and data flow composition paradigms.</description>
		<specification>
		
			<include fragments="conditionForCf" if="control_flow"/>
			<include fragments="conditionForDf" if="data_flow"/>
			<include fragments="conditionForSplit" if="split"/>
			<include fragments="conditionForJoin" if="join"/>
		
		</specification>
		<constraints>(control_flow AND blackboard) OR data_flow</constraints>
	</feature>
	
	<feature context="controlflow" name="split" label="Split">
		<description>An explicit construct allowing the synchronization of parallel flows is included in the composition language. Only when all the incoming flows are ready the execution of the flow can proceed. Supported only in the control flow composition paradigms. This feature differs fromthe merge feature since here we have a conjunctive semantic (all the incoming flow ready to trigger next operaiton) while in the merge feature we ha a disjunctive semantic (only one ready to trigger).</description>
		<specification>
		
			<include fragments="splitDef,splitType" />

		</specification>
		<constraints>control_flow</constraints>
	</feature>
	
	<feature context="controlflow" name="join" label="Join">
		<description>An explicit construct allowing the creation of parallel flows is included in the composition language. Supported only in the control flow composition paradigm. This feature is semantically equal to the branch feature, but in this case we have an explicit construct in the language.</description>
		<specification>
		
			<include fragments="joinType,joinDef" />
			
		</specification>
		<constraints>control_flow</constraints>
	</feature>
	
	<feature context="controlflow" name="loop" label="Loops">
		<description>Loops are allowed in the composition language and can be implemented as conditional connectors loops. For this reason loop require condition and merge features to be supported.</description>
		<specification>
		</specification>
		<constraints>control_flow AND condition AND NOT(no_merge)</constraints>
	</feature>
	
	<feature context="controlflow" name="no_merge" label="Single connector for each input port (operation or input parameter)">
		<description>Only one connector can be attached to the same input port. If not selected, as soon as one of the N incoming flows is ready the related operation is triggered (in case of data flow, only if also the other input parameters are ready; input parameters are buffered while waiting for operation triggering). Supported both in control and data flow composition paradigms. having this feature not selected is different by the synchronization feature since here we would have a disjunctive semantic (only one ready to trigger) while in the synchronization feature we have a conjunctive semantic (all the incoming flows ready to trigger next operation).</description>
		<specification>
			
			<include fragments="noMergeForDfInputParameter" if="data_flow"/>
			<include fragments="noMergeForDfGlobalVariableIn" if="blackboard"/>
			<include fragments="noMergeForCfTarget" if="control_flow"/>
			
		</specification>
		<constraints></constraints>
	</feature>
	
	<feature context="controlflow" name="no_branch" label="Single connector for each output port (operation or output parameter)">
		<description>Only one connector can be attached to the same output port, this forbids the creation of parallel flows. Not selecting this feature is semantically equivalent to selecting the split feature, but in this case we do not have an explicit construct in the language.</description>
		<specification>
		
			<include fragments="noBranchForDfOutputParameter" if="data_flow"/>
			<include fragments="noBranchForDfGlobalVariableOut" if="blackboard"/>
			<include fragments="noBranchForCfSource" if="control_flow"/>

		</specification>
		<constraints></constraints>
	</feature>
	
	
	
	<!-- Data passing -->
	
	<feature context="datapassing" name="data_flow" label="Data flow">
		<description>The composition paradigm is data flow, that is, it is possible to explicitly define the flow of the data among components opearations. In this case the data passing and the control flow overlap since operations triggering depends on the data flow.</description>
		<specification>
		
			<include fragments="dfConnectorDef,dfConnectorType,dfSourceOutputParameter,dfTargetInputParameter" />
			
		</specification>
		<constraints>NOT(blackboard)</constraints>
	</feature>
	
	<feature context="datapassing" name="blackboard" label="Blackboard">
		<description>The data passing is implemented through the use of global variables that can be read and/or written by all components operations.</description>
		<specification>
			
			<include fragments="dfConnectorDef,dfConnectorType,globalVariableDef,globalVariableType,dfSourceGlobalVariable,dfTargetGlobalVariable" />
			
		</specification>
		<constraints>NOT(data_flow)</constraints>
	</feature>
	
	
	
	<!-- Presentation -->
	
	<feature context="presentation" name="user_interface" label="User interface">
		<description>The language provides support for user interface definition. This feature is needed to include UI components and pages (containing placeholders to host them) in the compositions.</description>
		<specification>

			<include fragments="pageDef,pageType" />

		</specification>
		<constraints>UI_component AND (single_page XOR multi_page)</constraints>
	</feature>
	
	<feature context="presentation" name="single_page" label="Single page">
		<description>Maximum one page (to be used to embed and visualize UI componenets) is allowed.</description>
		<specification>
			
			<setCardinality element="setPageNumber" maxOccurs="1"/>

		</specification>
		<constraints>user_interface</constraints>
	</feature>
	
	<feature context="presentation" name="multi_page" label="Multi page">
		<description>No maximum number of pages (to be used to embed and visualize UI componenets) is defined.</description>
		<specification>
			
			<setCardinality element="setPageNumber" maxOccurs="unbounded"/>
			
		</specification>
		<constraints>user_interface</constraints>
	</feature>
	 
	 
	
	<!-- Collaboration --> 
	
	<feature context="collaboration" name="collaboration" label="Collaboration">
		<description>Creation of collaborative compositions is supported by the language. It means that more than one user can work on the same instance of a composition. </description>
		<specification>
		
			<include fragments="collaborationAttribute" />
			
		</specification>
		<constraints>user_interface AND (any_user XOR role_based_access)</constraints>
	</feature>
	
	<feature context="collaboration" name="any_user" label="Any user">
		<description>A collaborative composition can be used by many different users. Any user can participate to the composition (concurrent components usage, a la Omelette Live Environment). No need for authorization.</description>
		<specification>
			
			<include fragments="collaborationAnyUser" />
		
		</specification>
		<constraints>collaboration</constraints>
	</feature>
	
	<feature context="collaboration" name="role_based_access" label="Role-based access">
		<description>A collaborative composition can be used by many different users. Only authorized users can participate to the composition and each one has only access to the resources (i.e., pages) associated to his role. The roles list comes from a registry on the server</description>
		<specification>
			
			<include fragments="collaborationroleBasedAccess,userRoleDef,userRoleType,pageBelongsToUserRole" />
			
		</specification>
		<constraints>collaboration</constraints>
	</feature>
	
	<!-- Platform --> 
	
	<feature context="datapassing" name="support_reference_passing" label="Reference passing mode">
		<description>For performance reasons instead of passing actual data among components, a data reference passing mode can be used. Each component may support or not this mode; components supporting it receive and spit out only reference to data which is stored in a DB shared among them. Clearly all these components must belong to a unique system where they collaborate and share the same data resources. </description>
		<specification>

			<include fragments="supportReferencePassing" />
			
		</specification>
		<constraints>(data_flow OR blackboard) AND service_component AND (RSS_for_service OR atom_for_service OR REST_for_service OR SOAP_for_service) AND NOT(condition)</constraints>
	</feature>
	
	<feature context="datapassing" name="auto_data_mapping" label="Automatic data-mapping">
		<description>Data mapping, when connecting two operations in the editor canvas, is done automatically based on the data types of input and output parameters. Clearly, this features works well if components share a common data model. In this case, the feature implies a significant increase in usability.</description>
		<specification>

			<include fragments="" />
			
		</specification>
		<constraints>data_flow OR blackboard</constraints>
	</feature>
	
	<feature context="general" name="general_constraints" label="General constraints">
		<description>General constraints that must be always satisfied by the the features selection</description>
		<specification>
			<include fragments="BASE" />
		</specification>
		<constraints>((control_flow XOR data_flow) OR user_interface) AND ((data_component OR service_component OR UI_component)) AND ((max_0_operation_per_component AND NOT(max_1_operation_per_component) AND NOT(max_N_operation_per_component)) OR (NOT(max_0_operation_per_component) AND max_1_operation_per_component AND NOT(max_N_operation_per_component)) OR (NOT(max_0_operation_per_component) AND NOT(max_1_operation_per_component) AND max_N_operation_per_component)) AND (NOT(data_flow OR blackboard) OR ((data_flow OR blackboard) AND ((max_1_input_param_per_operation XOR max_N_input_param_per_operation) OR NOT(request_response_for_data AND request_response_for_service AND one_way_for_service AND one_way_for_UI AND solicit_response_for_service)) AND ((max_1_output_param_per_operation XOR max_N_output_param_per_operation) OR NOT(request_response_for_data AND request_response_for_service AND notification_for_service AND notification_for_UI AND solicit_response_for_service))))</constraints>
	</feature>
	
</features>

	<!-- GENERAL constraints always "selected" 
	
		composition_paradigm = Control flow and data flow cannot leave together, but one of them must be selected so that it is possible to define a flow. Alternatively, it is sufficient to have user interface feature selected to implement a language supporting a simple widget portal</description>
		(control_flow XOR data_flow) OR user_interface
		
		component_minimal_definition = At least one type of component must be defined. In addition, info about number of admitted operations and parameters must be given.</description>
		(data_component OR service_component OR UI_component)
		(max_0_operation_per_component XOR max_1_operation_per_component XOR max_N_operation_per_component) 
		(Min 0 operation per comp XOR Min 1 operation per comp)
		if (data_flow OR blackboard) then (Max 1 input parameter per operation XOR Max N input parameters per operation) AND (Max 1 output parameter per operation XOR Max N output parameters per operation)
	-->