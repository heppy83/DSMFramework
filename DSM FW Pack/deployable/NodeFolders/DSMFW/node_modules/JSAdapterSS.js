// JSAdapter Module

var CMPUtils = require("CMPUtils.js");
var $ = require("jquery");

var invoke = function(webSocketClient, componentId, operationId, inputParameters, expectedOutputParameterNames){

	var message = new Object();
	message.type = "event";
	message.body = new Object(); 
	message.body.componentId = componentId;
	message.body.operationId = operationId;
	message.body.inputParameters = inputParameters;
	message.body.expectedOutputParameterNames = expectedOutputParameterNames;
	
	webSocketClient.send(CMPUtils.JSONToString(message));
	
};

// manages incoming messages coming from: 
// (i) responses of req-res opers or (ii) asynch messages of notification opers
var processIncomingMessage = function(result, expectedOutputParameterNames){
	
	var res = null;
	if(result == null || result == undefined || result == ""){
		return {response: null};
	}
	
	if(typeof result != "object"){
		try{
			// try to parse it as JSON
			res = CMPUtils.stringToJSON(result);
			if(typeof res != "object")
				res = null;
		}
		catch(err){ /* do nothing */ }
		
		if(res==null){
			try{
				// try to parse it as XML
				res = CMPUtils.stringToXML(result);
			}
			catch(err){ /* do nothing */ }
		}
		
		
		if(res==null){ // it means that result is neither a JSON nor an XML serialization.
			// if only one output parameter is expected, return all the result as value of that param
			if(expectedOutputParameterNames.length == 1){
				return CMPUtils.stringToJSON('{"response":{"'+ expectedOutputParameterNames[0]+'":'+ result +'}}');
			}
			else { // otherwise an error message must be returned
				return CMPUtils.stringToJSON('{"response":{"_adapter_error":{"type":"unknown_output_params","details":"Impossible to find expected operation output parameters in service response: '+ CMPUtils.JSONToString(res) +'."}}');
			}
		}
		
	}
	
	if(typeof result == "object" || res!=null){
		
		var adapterResponse = new Object();
		adapterResponse.response = new Object();
		
		if(res==null)
			res = result;
		
		if($.isXMLDoc(res)){ // if result contains an XML document
			
			xmlRes = $(res);
			
			// check if the service response contains fields corresponding to the expected output params (do the best to "understand and use" service response)...
			for(var o=0; o<expectedOutputParameterNames.length; o++){
				// ... if they are there return a JSON object containing the output params with their content
				if(xmlRes(expectedOutputParameterNames[o]).length > 0)
					adapterResponse.response[expectedOutputParameterNames[o]] = CMPUtils.XMLToString(xmlRes.children(expectedOutputParameterNames[o])[0]); // this will check only in first level children of res, not in all the elements as the getElementsByTagName() would do
				// ... if not and if only one output param is expected, assume all the service response correspond to that single output param and return it as JSON 
				else if(expectedOutputParameterNames.length==1){
					return CMPUtils.stringToJSON('{"response":{"'+ expectedOutputParameterNames[0] +'":'+ res +'}}');
				}
				// ... if none of the above, an error for mismatching between expected and actual response parameters is returned
				else
					return CMPUtils.stringToJSON('{"response":{"_adapter_error":{"type":"unknown_output_params","details":"Impossible to find expected operation output parameters in service response: '+ CMPUtils.JSONToString(res) +'."}}');
			}
			return adapterResponse;
		}
		else{ // result contains a JavaScript object
			// check if the service response contains fields corresponding to the expected output params (do the best to "understand and use" service response)...
			for(var o=0; o<expectedOutputParameterNames.length; o++){
				// ... if they are there return a JSON object containing the output params with their content
				if(res.hasOwnProperty(expectedOutputParameterNames[o]))
					adapterResponse.response[expectedOutputParameterNames[o]] = res[expectedOutputParameterNames[o]];
				// ... if not and if only one output param is expected, assume all the service response correspond to that single output param and return it as JSON
				else if(expectedOutputParameterNames.length==1){
					return CMPUtils.stringToJSON('{"response":{"'+ expectedOutputParameterNames[0] +'":'+ res +'}}');
				}
				// ... if none of the above, an error for mismatching between expected and actual response parameters is returned
				else
					return CMPUtils.stringToJSON('{"response":{"_adapter_error":{"type":"unknown_output_params","details":"Impossible to find expected operation output parameters in service response: '+ CMPUtils.JSONToString(res) +'."}}');
			}
			return adapterResponse;
		}
		
	}
	
	return result;
}

// Retrieves the names of the parameters of a function from its declaration (signature)
var getParamNames = function(func) {
    var funStr = func.toString();
    return funStr.slice(funStr.indexOf('(')+1, funStr.indexOf(')')).match(/([^\s,]+)/g);
};

exports.invoke = invoke;
exports.processIncomingMessage = processIncomingMessage;